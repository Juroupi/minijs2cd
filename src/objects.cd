type Value = Object | `null | `undefined | Int | Float | String | Bool

type Object = {
	uid = Int;
	properties = (ref {..});
	prototype = (ref (Object | `null));
	..
}

type FunctionObject = Object + { call = (Value -> [Value*] -> Value) }

type BigIntObject = Object + { big_int_data = Int }
type NumberObject = Object + { number_data = Float }
type StringObject = Object + { string_data = String }
type BooleanObject = Object + { boolean_data = Bool }

type PropertyOperators = {
	get = (Object -> (Value | `nil));
	set = (Object -> Value -> []);
	delete = (Object -> []);
}

let new_uid =
	let uid = ref (Int) 0 in
	(fun (_ : []) : Int = uid := (!uid) + 1; !uid)

let create_object (properties : {..}) (prototype : Object | `null) : Object = {
	uid = (new_uid []);
	properties = (ref {..} properties);
	prototype = (ref (Object | `null) prototype);
}

let object_prototype = create_object {} `null

let function_prototype = create_object {} object_prototype

let create_function (properties : {..}) (call : Value -> [Value*] -> Value) : FunctionObject =
	(create_object properties function_prototype) + { call }

let number_prototype = (create_object {} object_prototype) + { number_data = (float_of "0") }
let big_int_prototype = create_object {} object_prototype
let string_prototype = (create_object {} object_prototype) + { string_data = "" }
let boolean_prototype = (create_object {} object_prototype) + { boolean_data = `false }

let call (obj : Value) (this : Value) (params : [Value*]) : Value =
	match obj with
	| fobj & FunctionObject -> fobj.call this params
	| _ -> raise "TypeError"

let contains_property (obj : Value) (ops : PropertyOperators) : Value =
	let obj = to_object obj in
	match ops.get obj with
	| `nil -> (
		match !(obj.prototype) with
		| `null -> `false
		| prototype & Object -> contains_property prototype ops
	)
	| Value -> `true

let get_property (obj : Value) (ops : PropertyOperators) : Value =
	let obj = to_object obj in
	match ops.get obj with
	| `nil -> (
		match !(obj.prototype) with
		| `null -> `undefined
		| prototype & Object -> get_property prototype ops
	)
	| value & Value -> value

let set_property (obj : Value) (ops : PropertyOperators) (value : Value) : Value =
	let obj = to_object obj in
	ops.set obj value;
	`true

let delete_property (obj : Value) (ops : PropertyOperators) : Value =
	let obj = to_object obj in
	ops.delete obj;
	`true

let get_prototype_of (obj : Value) : Value =
	let obj = to_object obj in
	!(obj.prototype)

let set_prototype_of (obj : Value) (value : Value) : Value =
	let obj = to_object obj in
	match value with
	| value & (Object | `null) -> obj.prototype := value
	| _ -> raise "set_prototype_of"

let string_of_number (n : Float) : String =
	match string_of n with
	| [ s::((Char \ '.')*) '.' '0'* ] -> s
	| [ s::((Char \ '.')* '.' (Char \ '0')*) '0'* ] -> s
	| s -> s

let string_of_boolean (b : Bool) : String =
	if b then "true" else "false"

let to_object (value : Value) : Object =
	match value with
	| `undefined -> raise "TypeError: cannot convert undefined to object"
	| `null -> raise "TypeError: cannot convert null to object"
	| big_int_data & Int -> (create_object {} object_prototype) + { big_int_data }
	| number_data & Float -> (create_object {} object_prototype) + { number_data }
	| string_data & String -> (create_object {} object_prototype) + { string_data }
	| boolean_data & Bool -> (create_object {} object_prototype) + { boolean_data }
	| o & Object -> o

let to_primitive (obj : Object) : Value =
	match obj with
	| o & BigIntObject -> o.big_int_data
	| o & NumberObject -> o.number_data
	| o & StringObject -> o.string_data
	| o & BooleanObject -> o.boolean_data
	| _ -> raise "TypeError: cannot convert object to primitive"

let to_number (value : Value) : Float =
	match value with
	| n & Float -> n
	| `undefined -> float_of "NaN"
	| `null -> float_of "0"
	| `false -> float_of "0"
	| `true -> float_of "1"
	| s & String -> float_of s
	| Int -> raise "TypeError: cannot convert bigint to number"
	| o & Object -> to_number (to_primitive o)

let to_boolean (value : Value) : Bool =
	not ((value = (float_of "NaN")) || (value = (float_of "0")) || (value = 0) || (value = `false) || (value = `null) || (value = `undefined) || (value = ""))

let type_of (value : Value) : String =
	match value with
	| `undefined -> "undefined"
	| `null -> "object"
	| Int -> "bigint"
	| Float -> "number"
	| String -> "string"
	| Bool -> "boolean"
	| FunctionObject -> "function"
	| Object -> "object"

let same_type (a : Value) (b : Value) : Bool =
	match (a, b) with
	| (`undefined, `undefined) -> `true
	| (`null, `null) -> `true
	| (Int, Int) -> `true
	| (Float, Float) -> `true
	| (String, String) -> `true
	| (Bool, Bool) -> `true
	| (Object, Object) -> `true
	| _ -> `false

let is_strictly_equal (a : Value) (b : Value) : Bool =
	match (a, b) with
	| (a & Object, b & Object) -> a.uid = b.uid
	| _ -> a = b

let is_strictly_inequal (a : Value) (b : Value) : Bool =
	not (is_strictly_equal a b)

let int_of_ (value : String) : Int =
	match value with
	| [ ('0'--'9')+ ] & c -> (int_of c)
	| _ -> raise [ `Invalid_argument "int_of" ]

let int_of = int_of_

let is_loosely_equal (a : Value) (b : Value) : Bool =
	if same_type a b then
		is_strictly_equal a b
	else try
		match (a, b) with
		| (`null, `undefined) -> `true
		| (`undefined, `null) -> `true
		| (a & Float, b & String) -> is_loosely_equal a (float_of b)
		| (a & String, b & Float) -> is_loosely_equal (float_of a) b
		| (a & Int, b & String) -> is_loosely_equal a (int_of b)
		| (a & String, b & Int) -> is_loosely_equal (int_of a) b
		| (_, Bool) -> is_loosely_equal a (to_number b)
		| (Bool, _) -> is_loosely_equal (to_number a) b
		| (_, b & Object) -> is_loosely_equal a (to_primitive b)
		| (a & Object, _) -> is_loosely_equal (to_primitive a) b
		| (a & Float, b & Int) -> is_loosely_equal a (float_of (string_of b))
		| (a & Int, b & Float) -> is_loosely_equal (float_of (string_of a)) b
		| _ -> `false
	with _ -> `false

let is_loosely_inequal (a : Value) (b : Value) : Bool =
	not (is_loosely_equal a b)

let print_value (value : Value) : [] =
	match value with
	| FunctionObject -> print "\x1B;[36m[Function]\x1B;[0m"
	| o & NumberObject -> print_utf8 ("\x1B;[33m[Number: " @ string_of_number o.number_data @ "]\x1B;[0m")
	| o & BigIntObject -> print_utf8 ("\x1B;[33m[BigInt: " @ string_of o.big_int_data @ "n]\x1B;[0m")
	| o & BooleanObject -> print_utf8 ("\x1B;[33m[Boolean: " @ string_of_boolean o.boolean_data @ "]\x1B;[0m")
	| o & StringObject -> print_utf8 ("\x1B;[32m[String: '" @ o.string_data @ "']\x1B;[0m")
	| Object -> print "{}"
	| `null -> print "\x1B;[1mnull\x1B;[0m"
	| `undefined -> print "\x1B;[90mundefined\x1B;[0m"
	| x & Int -> print ("\x1B;[33m" @ (string_of x) @ "n\x1B;[0m")
	| x & Float -> print_utf8 ("\x1B;[33m" @ string_of_number x @ "\x1B;[0m")
	| x & String -> print_utf8 x
	| x -> print_utf8 ("\x1B;[33m" @ string_of_boolean x @ "\x1B;[0m")

let print_sequence (values : [Value*]) : `undefined =
	let _ = (map values with value -> (print_value value; print " ")) in
	print "\n";
	`undefined

let global_this = create_object {} object_prototype

let this = create_object {} object_prototype

let globalThis = ref (Object) global_this

let __Object__ = ref (FunctionObject) (
	create_function {} (
		fun (_ : Value) (params : [Value*]) : Value =
			match params with
			| [] -> create_object {} object_prototype
			| [ param _* ] -> to_object param
	))

